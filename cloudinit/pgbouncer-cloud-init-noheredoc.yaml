#cloud-config

packages:
  - pgbouncer
  - postgresql-client
  - etcd

write_files:
  - path: /tmp/setup-etcd.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      HOSTNAME=$(hostname -s)
      IP=$(ip -4 addr show dev eth0 | awk '/inet /{print $2}' | cut -d/ -f1)
      # For PgBouncer node, etcd should join existing cluster (not create new)
      # Wait for DB nodes' etcd to be ready first
      MAX_WAIT=300
      ELAPSED=0
      while [ $ELAPSED -lt $MAX_WAIT ]; do
        if curl -fsS http://10.50.1.4:2379/health >/dev/null 2>&1 || \
           curl -fsS http://10.50.1.5:2379/health >/dev/null 2>&1; then
          echo "etcd cluster detected, proceeding with existing state"
          break
        fi
        sleep 5
        ELAPSED=$((ELAPSED + 5))
      done
      
      cat > /etc/default/etcd <<'ETCDEOF'
      ETCD_NAME="${HOSTNAME}"
      ETCD_INITIAL_CLUSTER_TOKEN="pg-ha-token"
      ETCD_INITIAL_CLUSTER="pgpatroni-1=http://10.50.1.4:2380,pgpatroni-2=http://10.50.1.5:2380,pgpatroni-pgb-1=http://10.50.1.7:2380"
      ETCD_INITIAL_CLUSTER_STATE="existing"
      ETCD_INITIAL_ADVERTISE_PEER_URLS="http://${IP}:2380"
      ETCD_ADVERTISE_CLIENT_URLS="http://${IP}:2379"
      ETCD_LISTEN_PEER_URLS="http://${IP}:2380"
      ETCD_LISTEN_CLIENT_URLS="http://127.0.0.1:2379,http://${IP}:2379"
      ETCDEOF
      sed -i "s/\${HOSTNAME}/${HOSTNAME}/g" /etc/default/etcd
      sed -i "s/\${IP}/${IP}/g" /etc/default/etcd
  - path: /etc/pgbouncer/pgbouncer.ini
    permissions: '0644'
    content: |
      [databases]
      postgres = host=10.50.1.10 port=5432 dbname=postgres
      * = host=10.50.1.10 port=5432
      [pgbouncer]
      listen_addr = 0.0.0.0
      listen_port = 6432
      pool_mode = transaction
      default_pool_size = 200
      max_client_conn = 2000
      ignore_startup_parameters = extra_float_digits
      auth_type = plain
      auth_file = /etc/pgbouncer/userlist.txt
      admin_users = pgbouncer,postgres
  - path: /etc/pgbouncer/userlist.txt
    permissions: '0640'
    content: |
      "pgbouncer" "StrongPass123"
      "postgres" "ChangeMe123Pass"

runcmd:
  - |
    # Ensure PgBouncer package is installed first (may fail if no internet, but we'll retry)
    if ! command -v pgbouncer >/dev/null 2>&1; then
      echo "PgBouncer not found, attempting to install..."
      apt-get update -qq >/dev/null 2>&1 || true
      DEBIAN_FRONTEND=noninteractive apt-get install -y pgbouncer >/dev/null 2>&1 || echo "Installation failed, will retry later"
    fi
  - adduser --system --group --home /var/lib/pgbouncer pgbouncer || true
  - install -o pgbouncer -g pgbouncer -m 755 -d /run/pgbouncer /var/log/pgbouncer /etc/pgbouncer
  - |
    IP=$(ip -4 addr show dev eth0 | awk '/inet /{print $2}' | cut -d/ -f1)
    if [ "$IP" = "10.50.1.7" ]; then
      /tmp/setup-etcd.sh
      systemctl enable etcd
      systemctl restart etcd
    else
      systemctl stop etcd || true
      systemctl disable etcd || true
    fi
  - chown pgbouncer:pgbouncer /etc/pgbouncer/userlist.txt
  - chmod 640 /etc/pgbouncer/userlist.txt
  - chown -R pgbouncer:pgbouncer /etc/pgbouncer /var/log/pgbouncer /run/pgbouncer
  - |
    # Find PgBouncer binary location (ensure it's installed first)
    PGB_BIN=$(which pgbouncer 2>/dev/null || find /usr -name pgbouncer -type f 2>/dev/null | head -1 || echo "/usr/sbin/pgbouncer")
    if [ ! -x "$PGB_BIN" ]; then
      echo "PgBouncer binary not found at $PGB_BIN, ensuring package is installed..."
      apt-get update -qq >/dev/null 2>&1 || true
      DEBIAN_FRONTEND=noninteractive apt-get install -y pgbouncer >/dev/null 2>&1 || true
      PGB_BIN=$(which pgbouncer 2>/dev/null || find /usr -name pgbouncer -type f 2>/dev/null | head -1 || echo "/usr/sbin/pgbouncer")
    fi
    echo "Using PgBouncer binary: $PGB_BIN"
    tee /etc/systemd/system/pgbouncer.service >/dev/null <<UNIT
[Unit]
Description=PgBouncer connection pooler
After=network-online.target
Wants=network-online.target
[Service]
User=pgbouncer
Group=pgbouncer
Type=simple
ExecStart=$PGB_BIN -q /etc/pgbouncer/pgbouncer.ini
PIDFile=/run/pgbouncer/pgbouncer.pid
RuntimeDirectory=pgbouncer
RuntimeDirectoryMode=0755
Restart=on-failure
RestartSec=2
[Install]
WantedBy=multi-user.target
UNIT
  - systemctl daemon-reload
  - systemctl enable pgbouncer
  - |
    # Verify files were created correctly
    echo "Verifying PgBouncer setup..."
    if [ ! -f /etc/pgbouncer/pgbouncer.ini ]; then
      echo "ERROR: pgbouncer.ini not found! Creating manually..."
      cat > /etc/pgbouncer/pgbouncer.ini <<'INIFILE'
[databases]
postgres = host=10.50.1.10 port=5432 dbname=postgres
* = host=10.50.1.10 port=5432
[pgbouncer]
listen_addr = 0.0.0.0
listen_port = 6432
pool_mode = transaction
default_pool_size = 200
max_client_conn = 2000
ignore_startup_parameters = extra_float_digits
auth_type = plain
auth_file = /etc/pgbouncer/userlist.txt
admin_users = pgbouncer,postgres
INIFILE
      chown pgbouncer:pgbouncer /etc/pgbouncer/pgbouncer.ini
    fi
    if [ ! -f /etc/pgbouncer/userlist.txt ]; then
      echo "ERROR: userlist.txt not found! Creating manually..."
      cat > /etc/pgbouncer/userlist.txt <<'USERLIST'
"pgbouncer" "StrongPass123"
"postgres" "ChangeMe123Pass"
USERLIST
      chown pgbouncer:pgbouncer /etc/pgbouncer/userlist.txt
      chmod 640 /etc/pgbouncer/userlist.txt
    fi
    if [ ! -f /etc/systemd/system/pgbouncer.service ]; then
      echo "ERROR: pgbouncer.service not found! Creating manually..."
      # Find PgBouncer binary location
      PGB_BIN=$(which pgbouncer 2>/dev/null || find /usr -name pgbouncer -type f 2>/dev/null | head -1 || echo "/usr/sbin/pgbouncer")
      cat > /etc/systemd/system/pgbouncer.service <<UNITFILE
[Unit]
Description=PgBouncer connection pooler
After=network-online.target
Wants=network-online.target
[Service]
User=pgbouncer
Group=pgbouncer
Type=simple
ExecStart=$PGB_BIN -q /etc/pgbouncer/pgbouncer.ini
PIDFile=/run/pgbouncer/pgbouncer.pid
RuntimeDirectory=pgbouncer
RuntimeDirectoryMode=0755
Restart=on-failure
RestartSec=2
[Install]
WantedBy=multi-user.target
UNITFILE
      systemctl daemon-reload
    fi
  - |
    # PostgreSQL ILB'nin hazır olmasını bekle (en fazla 10 dakika)
    DB_ILB="10.50.1.10"
    echo "Waiting for PostgreSQL ILB ($DB_ILB) to be ready..."
    DB_READY=false
    for i in {1..120}; do
      if timeout 3 bash -c "echo > /dev/tcp/$DB_ILB/5432" 2>/dev/null; then
        # Also test actual PostgreSQL connection
        if PGPASSWORD='ChangeMe123Pass' timeout 3 psql -h "$DB_ILB" -p 5432 -U postgres -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
          echo "PostgreSQL ILB is ready and accepting connections!"
          DB_READY=true
          break
        fi
      fi
      if [ $((i % 12)) -eq 0 ]; then
        echo "Still waiting for PostgreSQL ILB... ($((i * 5))s elapsed)"
      fi
      sleep 5
    done
    if [ "$DB_READY" != "true" ]; then
      echo "WARNING: PostgreSQL ILB not fully ready after 10 minutes, will continue anyway..."
    fi
  - |
    # PgBouncer servisini başlat ve hazır olana kadar bekle
    echo "Starting PgBouncer service..."
    systemctl start pgbouncer || true
    sleep 5
    
    # Servis başarısızsa retry (en fazla 20 deneme, 2 dakika)
    PGB_READY=false
    for i in {1..20}; do
      if systemctl is-active --quiet pgbouncer; then
        if ss -lntp | grep -q :6432; then
          echo "PgBouncer is active and listening on port 6432"
          # Test backend connection through PgBouncer
          sleep 3
          if PGPASSWORD='ChangeMe123Pass' timeout 5 psql -h 127.0.0.1 -p 6432 -U postgres -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
            echo "SUCCESS: PgBouncer is running and can connect to backend PostgreSQL"
            PGB_READY=true
            break
          else
            echo "PgBouncer listening but backend connection not ready yet, waiting..."
            sleep 5
          fi
        else
          echo "PgBouncer service active but port 6432 not listening, waiting..."
          sleep 3
        fi
      else
        echo "PgBouncer service not active, attempting restart ($i/20)..."
        systemctl restart pgbouncer || true
        sleep 5
      fi
    done
    
    # Final verification
    if [ "$PGB_READY" != "true" ]; then
      echo "WARNING: PgBouncer may not be fully ready"
      echo "Service status:"
      systemctl status pgbouncer --no-pager || true
      echo "Port check:"
      ss -lntp | grep 6432 || echo "Port 6432 not listening"
      echo "Recent logs:"
      journalctl -u pgbouncer -n 30 --no-pager || true
      # Try one more restart
      echo "Attempting final restart..."
      systemctl restart pgbouncer
      sleep 5
    fi
    
    # Final health check
    if systemctl is-active --quiet pgbouncer && ss -lntp | grep -q :6432; then
      echo "✓ PgBouncer service is running"
    else
      echo "✗ PgBouncer service failed to start properly"
      exit 1
    fi
