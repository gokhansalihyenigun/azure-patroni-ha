#cloud-config

packages:
  - pgbouncer
  - postgresql-client
  - etcd

write_files:
  - path: /tmp/setup-etcd.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      HOSTNAME=$(hostname -s)
      IP=$(ip -4 addr show dev eth0 | awk '/inet /{print $2}' | cut -d/ -f1)
      # For PgBouncer node, etcd should join existing cluster (not create new)
      # Wait for DB nodes' etcd to be ready first
      MAX_WAIT=300
      ELAPSED=0
      while [ $ELAPSED -lt $MAX_WAIT ]; do
        if curl -fsS http://10.50.1.4:2379/health >/dev/null 2>&1 || \
           curl -fsS http://10.50.1.5:2379/health >/dev/null 2>&1; then
          echo "etcd cluster detected, proceeding with existing state"
          break
        fi
        sleep 5
        ELAPSED=$((ELAPSED + 5))
      done
      
      cat > /etc/default/etcd <<'ETCDEOF'
      ETCD_NAME="${HOSTNAME}"
      ETCD_INITIAL_CLUSTER_TOKEN="pg-ha-token"
      ETCD_INITIAL_CLUSTER="pgpatroni-1=http://10.50.1.4:2380,pgpatroni-2=http://10.50.1.5:2380,pgpatroni-pgb-1=http://10.50.1.7:2380"
      ETCD_INITIAL_CLUSTER_STATE="existing"
      ETCD_INITIAL_ADVERTISE_PEER_URLS="http://${IP}:2380"
      ETCD_ADVERTISE_CLIENT_URLS="http://${IP}:2379"
      ETCD_LISTEN_PEER_URLS="http://${IP}:2380"
      ETCD_LISTEN_CLIENT_URLS="http://127.0.0.1:2379,http://${IP}:2379"
      ETCDEOF
      sed -i "s/\${HOSTNAME}/${HOSTNAME}/g" /etc/default/etcd
      sed -i "s/\${IP}/${IP}/g" /etc/default/etcd

runcmd:
  - |
    # STEP 1: Install PgBouncer package (with retry for internet issues)
    echo "=== Installing PgBouncer package ==="
    if ! command -v pgbouncer >/dev/null 2>&1; then
      echo "PgBouncer not found, installing..."
      apt-get update -qq >/dev/null 2>&1 || true
      DEBIAN_FRONTEND=noninteractive apt-get install -y pgbouncer >/dev/null 2>&1 || {
        echo "First install attempt failed, retrying..."
        sleep 10
        apt-get update -qq >/dev/null 2>&1 || true
        DEBIAN_FRONTEND=noninteractive apt-get install -y pgbouncer || {
          echo "ERROR: Failed to install PgBouncer package"
          exit 1
        }
      }
    fi
    echo "✓ PgBouncer package installed"
  - |
    # STEP 2: Create pgbouncer user and directories (BEFORE creating config files)
    echo "=== Creating pgbouncer user and directories ==="
    adduser --system --group --home /var/lib/pgbouncer --no-create-home pgbouncer || true
    
    # Create all necessary directories with correct permissions
    install -o pgbouncer -g pgbouncer -m 755 -d /etc/pgbouncer || true
    install -o pgbouncer -g pgbouncer -m 755 -d /run/pgbouncer || true
    install -o pgbouncer -g pgbouncer -m 755 -d /var/log/pgbouncer || true
    install -o pgbouncer -g pgbouncer -m 755 -d /var/lib/pgbouncer || true
    
    echo "✓ Directories created"
  - |
    # STEP 3: Create configuration files (AFTER user and directories exist)
    echo "=== Creating PgBouncer configuration ==="
    
    # Create pgbouncer.ini
    cat > /etc/pgbouncer/pgbouncer.ini <<'INIFILE'
    [databases]
    postgres = host=10.50.1.10 port=5432 dbname=postgres
    * = host=10.50.1.10 port=5432
    [pgbouncer]
    listen_addr = 0.0.0.0
    listen_port = 6432
    pool_mode = transaction
    default_pool_size = 200
    max_client_conn = 2000
    ignore_startup_parameters = extra_float_digits
    auth_type = plain
    auth_file = /etc/pgbouncer/userlist.txt
    admin_users = pgbouncer,postgres
    INIFILE
    
    # Create userlist.txt
    cat > /etc/pgbouncer/userlist.txt <<'USERLIST'
    "pgbouncer" "StrongPass123"
    "postgres" "ChangeMe123Pass"
    USERLIST
    
    # Set correct ownership and permissions
    chown pgbouncer:pgbouncer /etc/pgbouncer/pgbouncer.ini
    chmod 644 /etc/pgbouncer/pgbouncer.ini
    chown pgbouncer:pgbouncer /etc/pgbouncer/userlist.txt
    chmod 640 /etc/pgbouncer/userlist.txt
    
    echo "✓ Configuration files created"
  - |
    # STEP 4: Setup etcd (only for pgpatroni-pgb-1)
    IP=$(ip -4 addr show dev eth0 | awk '/inet /{print $2}' | cut -d/ -f1)
    if [ "$IP" = "10.50.1.7" ]; then
      echo "=== Setting up etcd (pgpatroni-pgb-1) ==="
      /tmp/setup-etcd.sh
      systemctl enable etcd
      systemctl restart etcd
      sleep 5
      echo "✓ etcd configured and started"
    else
      systemctl stop etcd || true
      systemctl disable etcd || true
    fi
  - |
    # STEP 5: Create systemd service file
    echo "=== Creating systemd service ==="
    
    # Find PgBouncer binary (must be installed by now)
    PGB_BIN=$(which pgbouncer 2>/dev/null || find /usr -name pgbouncer -type f -executable 2>/dev/null | head -1)
    if [ -z "$PGB_BIN" ] || [ ! -x "$PGB_BIN" ]; then
      echo "ERROR: PgBouncer binary not found!"
      which pgbouncer || find /usr -name pgbouncer || echo "Search failed"
      exit 1
    fi
    echo "Using PgBouncer binary: $PGB_BIN"
    
    # Verify config file exists and is readable
    if [ ! -f /etc/pgbouncer/pgbouncer.ini ]; then
      echo "ERROR: /etc/pgbouncer/pgbouncer.ini not found!"
      exit 1
    fi
    
    # Create systemd service file
    cat > /etc/systemd/system/pgbouncer.service <<UNIT
    [Unit]
    Description=PgBouncer connection pooler
    After=network-online.target
    Wants=network-online.target
    
    [Service]
    User=pgbouncer
    Group=pgbouncer
    Type=simple
    ExecStart=$PGB_BIN -u pgbouncer -q /etc/pgbouncer/pgbouncer.ini
    PIDFile=/run/pgbouncer/pgbouncer.pid
    RuntimeDirectory=pgbouncer
    RuntimeDirectoryMode=0755
    Restart=on-failure
    RestartSec=5
    StandardOutput=journal
    StandardError=journal
    
    [Install]
    WantedBy=multi-user.target
    UNIT
    
    # Reload systemd and enable service
    systemctl daemon-reload
    systemctl enable pgbouncer
    
    echo "✓ Systemd service created and enabled"
  - |
    # STEP 6: Wait for PostgreSQL ILB to be ready
    echo "=== Waiting for PostgreSQL ILB ==="
    DB_ILB="10.50.1.10"
    DB_READY=false
    
    for i in {1..120}; do
      # Test TCP connection
      if timeout 3 bash -c "echo > /dev/tcp/$DB_ILB/5432" 2>/dev/null; then
        # Test actual PostgreSQL connection
        if PGPASSWORD='ChangeMe123Pass' timeout 3 psql -h "$DB_ILB" -p 5432 -U postgres -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
          echo "✓ PostgreSQL ILB is ready and accepting connections!"
          DB_READY=true
          break
        fi
      fi
      if [ $((i % 12)) -eq 0 ]; then
        echo "Still waiting for PostgreSQL ILB... ($((i * 5))s elapsed)"
      fi
      sleep 5
    done
    
    if [ "$DB_READY" != "true" ]; then
      echo "WARNING: PostgreSQL ILB not fully ready after 10 minutes, will continue anyway..."
    fi
  - |
    # STEP 7: Start PgBouncer service with comprehensive verification
    echo "=== Starting PgBouncer service ==="
    
    # Start service
    systemctl start pgbouncer
    sleep 5
    
    # Verify service started
    PGB_READY=false
    MAX_RETRIES=30
    
    for i in $(seq 1 $MAX_RETRIES); do
      # Check service is active
      if ! systemctl is-active --quiet pgbouncer; then
        echo "PgBouncer service not active (attempt $i/$MAX_RETRIES), checking status..."
        systemctl status pgbouncer --no-pager -l || true
        journalctl -u pgbouncer -n 10 --no-pager || true
        echo "Restarting service..."
        systemctl restart pgbouncer || true
        sleep 5
        continue
      fi
      
      # Check port is listening
      if ! ss -lntp | grep -q :6432; then
        echo "Service active but port 6432 not listening (attempt $i/$MAX_RETRIES)..."
        sleep 3
        continue
      fi
      
      # Test connection through PgBouncer
      sleep 3
      if PGPASSWORD='ChangeMe123Pass' timeout 5 psql -h 127.0.0.1 -p 6432 -U postgres -d postgres -c "SELECT 1;" >/dev/null 2>&1; then
        echo "✓ PgBouncer is running and can connect to backend PostgreSQL"
        PGB_READY=true
        break
      else
        echo "PgBouncer listening but backend connection test failed (attempt $i/$MAX_RETRIES)..."
        # Show connection error details
        PGPASSWORD='ChangeMe123Pass' timeout 5 psql -h 127.0.0.1 -p 6432 -U postgres -d postgres -c "SELECT 1;" 2>&1 | head -5 || true
        sleep 5
      fi
    done
    
    # Final diagnostics if not ready
    if [ "$PGB_READY" != "true" ]; then
      echo "=== PgBouncer diagnostic information ==="
      echo "Service status:"
      systemctl status pgbouncer --no-pager -l || true
      echo ""
      echo "Port check:"
      ss -lntp | grep 6432 || echo "Port 6432 not listening"
      echo ""
      echo "Recent logs:"
      journalctl -u pgbouncer -n 50 --no-pager || true
      echo ""
      echo "Config file check:"
      ls -la /etc/pgbouncer/ || true
      echo ""
      echo "Process check:"
      ps aux | grep pgbouncer || true
      echo ""
      echo "Attempting final restart..."
      systemctl restart pgbouncer
      sleep 10
    fi
    
    # Final verification
    if systemctl is-active --quiet pgbouncer && ss -lntp | grep -q :6432; then
      if PGPASSWORD='ChangeMe123Pass' timeout 5 psql -h 127.0.0.1 -p 6432 -U postgres -d postgres -c "SELECT version();" >/dev/null 2>&1; then
        echo "✓✓✓ PgBouncer service is fully operational ✓✓✓"
      else
        echo "⚠ PgBouncer service running but backend connection may have issues"
      fi
    else
      echo "✗✗✗ PgBouncer service failed to start properly ✗✗✗"
      exit 1
    fi
